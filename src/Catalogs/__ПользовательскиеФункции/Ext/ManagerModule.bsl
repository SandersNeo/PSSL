#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс
	
// Процедура обновляет тексты предопределенных элементов справочника пользовательские функции.
// 
// 
Процедура ОбновитьПредопределенныеЭлементы(Знач Макет = Неопределено, РежимСообщений = "Все") Экспорт
	
	// ++ Обход ошибки отстутствия модуля БСП, не переносить
	ОбщегоНазначения = Неопределено;
	// -- Обход ошибки отстутствия модуля БСП, не переносить
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);
	
	Если Макет = Неопределено Тогда
		Макет = Справочники.__ПользовательскиеФункции.ПолучитьМакет("НастройкиПоУмолчанию");
	КонецЕсли;
	
	ТекстМакета = Макет.ПолучитьТекст();
	
	СтруктураТаблиц = Новый Структура;
	
	// Чтобы не уйти в вечный цикл
	КоличествоТаблиц = 0;
	
	// Получим данные таблиц из макета
	Пока Истина Цикл
		НомерПервойПозиции = Найти(ТекстМакета, "<Items");
		НомерПоследнейПозиции = Найти(ТекстМакета, "</Items>");
		
		Если НомерПервойПозиции = 0
			ИЛИ НомерПоследнейПозиции = 0
			ИЛИ КоличествоТаблиц > 99 Тогда
			
			Прервать;
		КонецЕсли;
		
		ТекстОписанияТаблицы = Сред(ТекстМакета, НомерПервойПозиции, НомерПоследнейПозиции+7);
		
		ТекстМакета = СтрЗаменить(ТекстМакета, ТекстОписанияТаблицы, "");
		
		Структура = __ОбщегоНазначенияСервер.ПрочитатьXMLВТаблицу(ТекстОписанияТаблицы);
		
		СтруктураТаблиц.Вставить(Структура.ИмяТаблицы, Структура.Данные);
		
		КоличествоТаблиц = КоличествоТаблиц + 1;
	КонецЦикла;
	
	Ном = 0;
	// Обработаем данные полученные из макета
	Для Каждого ОписаниеЭлемента Из СтруктураТаблиц.ТаблицаПредопределенныеЭлементы Цикл
		
		Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПредопределенного) Тогда
			Попытка
				СпрСсылка = Справочники.__ПользовательскиеФункции[ОписаниеЭлемента.ИмяПредопределенного];
			Исключение
				СпрСсылка = Неопределено;	
				
				Если ВыводитьОшибки Тогда
					
					ТекстСообщения = НСтр("ru='Не удалось найти предопределенный элемент справочника ""Пользовательские функции"" по имени %1';
										|en='Failed to find a predefined element of the directory ""User-defined functions"" named %1'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеЭлемента.ИмяПредопределенного);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецПопытки;
		Иначе
			СпрСсылка = Неопределено;
		КонецЕсли;
		
		Если СпрСсылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если __ОбщегоНазначенияКлиентСервер.ВерсияОбновленияСтарше(СпрСсылка.Релиз,ОписаниеЭлемента.Релиз) Тогда
			
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			
			СпрОбъект.Наименование = ОписаниеЭлемента.Наименование;
			СпрОбъект.КодПодпрограммы = ОписаниеЭлемента.КодПодпрограммы;
			СпрОбъект.Описание = ОписаниеЭлемента.Описание;
			СпрОбъект.ТипВозвращаемогоЗначения = ОписаниеЭлемента.ТипВозвращаемогоЗначения;
			СпрОбъект.Контекст = Перечисления.__КонтекстыВыполненияПользовательскихФункций[ОписаниеЭлемента.Контекст];
			СпрОбъект.Релиз = ОписаниеЭлемента.Релиз;
			
			// Заполним таблицу ПараметрыФункции в элементе справочника.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИД", ОписаниеЭлемента.ИД);
			
			НайденныеПараметры = СтруктураТаблиц.ТаблицаПараметрыФункции.НайтиСтроки(СтруктураОтбора);
			
			Если НЕ НайденныеПараметры.Количество() = 0 Тогда
				СпрОбъект.ПараметрыФункции.Очистить();
				
				Для Каждого ОписаниеПараметра Из НайденныеПараметры Цикл
					
					НовыйПараметр = СпрОбъект.ПараметрыФункции.Добавить();
					НовыйПараметр.Наименование = ОписаниеПараметра.Наименование;
					НовыйПараметр.НеОбязательныйДляЗаполнения = ?(ОписаниеПараметра.НеОбязательныйДляЗаполнения="Истина", Истина, Ложь);
					
				КонецЦикла;
			КонецЕсли;
			
			флДействиеВыполнено = __ОбщегоНазначенияСервер.ЗаписатьСправочник(СпрОбъект,,"Ошибки");
			Если флДействиеВыполнено Тогда
				Ном = Ном + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьИнформацию Тогда
		
		ТекстСообщения = НСтр("ru='Выполнена проверка версий предопределенных элементов справочника ""Пользовательские функции"". Обновлено %1 элементов.';
							|en='Successfully checked the versions of predefined elements of the directory ""User functions"". %1 elements updated.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(Ном));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру заголовков для элемента справочника.
// 
Функция ПолучитьНазваниеПодпрограммыСПараметрами(Ссылка) Экспорт
	
	// Значения элементов структуры:
	// 
	// 	- ЗаголовокФункции: Функция МояФункция(Параметр1, Параметр2).
	// 	- НазваниеСПараметрами: МояФункция(Параметр1, Параметр2).
	// 	- ОписаниеПараметров: // Типы входных параметров: 
	// 						  // Параметр1 - 'Число'.
	// 						  // Параметр2 - 'Строка'.
	СтруктураПараметров = Новый Структура("ЗаголовокФункции,НазваниеСПараметрами,ОписаниеПараметров");
	
	ТекстНазвания = СокрЛП(Ссылка.Наименование) + "(";
	ТекстКомментария 	= "// Типы входных параметров: ";
	
	Для Каждого Параметр Из Ссылка.ПараметрыФункции Цикл
		
		ТекстНазвания = ТекстНазвания + СокрЛП(Параметр.Наименование);
		
		Если Параметр.НеОбязательныйДляЗаполнения Тогда
			ТекстНазвания = ТекстНазвания + " = Неопределено";
		КонецЕсли;
		
		Если ТипЗнч(Ссылка) = Тип("ДанныеФормыСтруктура") Тогда
			ОписаниеТипаПараметра = "";
		Иначе
			ОписаниеТипаПараметра = СокрЛП(Параметр.ТипПараметра.Получить());
		КонецЕсли;
		
		ТекстКомментария = ТекстКомментария + Символы.ПС + "// " + СокрЛП(Параметр.Наименование) + " - " + "'" + ОписаниеТипаПараметра + "'";
		
		Если НЕ Параметр.НомерСтроки = Ссылка.ПараметрыФункции.Количество() Тогда
			ТекстНазвания = ТекстНазвания + ", ";
		КонецЕсли;	
		
	КонецЦикла;
	
	ТекстНазвания = ТекстНазвания + ")";
	
	СтруктураПараметров.ЗаголовокФункции = "Функция " + ТекстНазвания;
	СтруктураПараметров.НазваниеСПараметрами = ТекстНазвания;
	СтруктураПараметров.ОписаниеПараметров = ТекстКомментария;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура заполняет параметры функции для переданного объекта.
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура, СправочникОбъект.__ПользовательскиеФункции.
// 
Процедура ЗаполнитьПараметры(Объект) Экспорт
	
	Если Объект.Контекст = Перечисления.__КонтекстыВыполненияПользовательскихФункций.ЗагрузкаЭксель Тогда
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыЗагрузкаЭксель(Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет добавляет параметр при отсутствии. 
// 
// Параметры:
//  ИмяПараметра - Строка.
// 
Процедура НайтиДобавитьПараметр(Объект, ИмяПараметра)
	
	СтрОтбор = Новый Структура("Наименование", ИмяПараметра);
	МассивСтрок = Объект.ПараметрыФункции.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = Объект.ПараметрыФункции.Добавить();
		НоваяСтрока.Наименование = ИмяПараметра;
	КонецЕсли;
	
КонецПроцедуры // НайтиДобавитьПараметр()

// Процедура добавляет параметры, необходимые для контекста ЗагрузкаЭксель.
// 
// 
Процедура ДобавитьПараметрыЗагрузкаЭксель(Объект)
	
	НайтиДобавитьПараметр(Объект, "СтрокаЗагрузки");
	НайтиДобавитьПараметр(Объект, "ДанныеЗагрузки");
	НайтиДобавитьПараметр(Объект, "СтрокаПравил");
	
КонецПроцедуры // ДобавитьПараметрыЗагрузкаЭксель() 

#КонецОбласти

#КонецЕсли
