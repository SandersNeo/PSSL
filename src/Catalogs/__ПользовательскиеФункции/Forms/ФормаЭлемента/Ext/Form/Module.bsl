#Область ОписаниеПеременных

#КонецОбласти

#Область ОписаниеПеременных

&НаКлиенте
Перем мПредИмя; // Хранит имя переменной до его изменения

&НаКлиенте
Перем мЗначенияПараметров; // Хранит соответствие параметров и их значений для отладки.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьТипыПараметров(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение параметров
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ПараметрыФункции") Тогда
				СпрОбъект = РеквизитФормыВЗначение("Объект");
				Для Каждого ТекущийПараметр Из Параметры.ЗначенияЗаполнения.ПараметрыФункции Цикл
					НовыйПараметр = СпрОбъект.ПараметрыФункции.Добавить();
					НовыйПараметр.Наименование = ТекущийПараметр.Ключ;
					ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекущийПараметр.Значение);
				КонецЦикла;
				
				ЗначениеВДанныеФормы(СпрОбъект, Объект);
				ПрочитатьТипыПараметров(СпрОбъект);
			Иначе
				ДобавитьПараметры();
			КонецЕсли;
		Иначе
			ДобавитьПараметры();
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер();
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мЗначенияПараметров = Новый Соответствие;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохраним указанные типы параметров в объекте.
	Для Каждого ТекущийПараметр Из Объект.ПараметрыФункции Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Наименование", ТекущийПараметр.Наименование);
		
		МассивСтрок = ТекущийОбъект.ПараметрыФункции.НайтиСтроки(СтруктураОтбора);
		
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			МассивСтрок[0].ТипПараметра = Новый ХранилищеЗначения(ТекущийПараметр.фТипПараметра);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьТипыПараметров(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстПриИзменении(Элемент)
	
	КонтекстПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыФункции

&НаКлиенте
Процедура ПараметрыФункцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПараметрыФункции.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Наименование = "П" + Строка(ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыФункцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыФункцииПослеУдаления(Элемент)
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеременные

&НаКлиенте
Процедура ПеременныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Переменные.ТекущиеДанные;
	
	мПредИмя = ТекущиеДанные.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременныеИмяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Переменные.ТекущиеДанные;
	
	Если НЕ ПустаяСтрока(мПредИмя) И НЕ ПустаяСтрока(ТекущиеДанные.Имя) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПеременныеИмяПриИзмененииЗавершение", ЭтотОбъект, ТекущиеДанные);
		ТекстВопроса = НСтр("ru='Выполнить замену в коде имени ""%1"" на имя ""%2""?';
							|en='Change name code ""%1"" for ""%2""?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, мПредИмя, ТекущиеДанные.Имя);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	Иначе
		мПредИмя = ТекущиеДанные.Имя;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ПеременныеИмяПриИзмененииЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ТекущиеДанные - Текущие данные таблицы "Переменные".
// 
&НаКлиенте
Процедура ПеременныеИмяПриИзмененииЗавершение(Ответ, ТекущиеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.КодПодпрограммы = СтрЗаменить(Объект.КодПодпрограммы, "." + мПредИмя, "." + ТекущиеДанные.Имя);
	КонецЕсли;
	
	мПредИмя = ТекущиеДанные.Имя;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВвестиУсловноеВыражение(Команда)
	
	ОткрытьКонструкторУсловногоВыражения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПоле(Команда)
	
	ОткрытьФормуВыбораПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписание(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьОписаниеЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(Обработчик, Объект.Описание, НСтр("ru='Описание подпрограммы';en='description of routines'"),, Истина);
	
КонецПроцедуры

// Процедура обработчик оповещения "ДобавитьОписаниеЗавершение".
// 
// Параметры:
// Текст - Строка.
// ПараметрыИсточника - Структура.
// 
&НаКлиенте
Процедура ДобавитьОписаниеЗавершение(Текст, ПараметрыИсточника) Экспорт
	
	Если Текст <> Неопределено Тогда
		Объект.Описание = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЗапрос(Команда)
	
	// ++ Обход ошибки отстутствия модуля БСП, не переносить
	ОбщегоНазначенияКлиент = Неопределено;
	// -- Обход ошибки отстутствия модуля БСП, не переносить
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		КонструкторЗапроса = Новый КонструкторЗапроса;
		
		Если СокрЛП(Элементы.КодПодпрограммы.ВыделенныйТекст) <> "" Тогда
			КонструкторЗапроса.Текст = __СтроковыеФункцииКлиентСервер.УбратьДобавитьПалки(Элементы.КодПодпрограммы.ВыделенныйТекст);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("КонструкторЗапросаЗавершениеРедактирования", ЭтотОбъект);
		КонструкторЗапроса.Показать(Оповещение);
	#Иначе
		
		ТекстСообщения = НСтр("ru='Работа с конструктором запроса доступна только в толстом клиенте.';
							  |en='Working with Query Designer is only available in the thick client.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	#КонецЕсли
	
КонецПроцедуры

// Обработчик завершения закрытия диалога конструктора запроса.
//  См. Синтакс-помощник: КонструкторЗапроса.Показать().
//
&НаКлиенте
Процедура КонструкторЗапросаЗавершениеРедактирования(ИзмененныйТекстЗапроса, ДополнительныеДанные) Экспорт
	
	Если ИзмененныйТекстЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КодПодпрограммы.ВыделенныйТекст = __СтроковыеФункцииКлиентСервер.УбратьДобавитьПалки(ИзмененныйТекстЗапроса, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьПараметры(Команда)
	
	СтруктураТаблиц = Новый Структура;
	УпаковатьТаблицу("ПараметрыФункции",СтруктураТаблиц);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыФункции", СтруктураТаблиц.ПараметрыФункции);
	ПараметрыФормы.Вставить("ЗначенияПараметров", мЗначенияПараметров);
	
	Обработчик = Новый ОписаниеОповещения("ЗадатьПараметрыЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник.__ПользовательскиеФункции.Форма.ФормаПараметров", ПараметрыФормы, ЭтотОбъект,,,, Обработчик, Режим);
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗадатьПараметрыЗавершение".
// 
// Параметры:
// НаборПараметров - Структура.
// Параметры - Структура.
// 
&НаКлиенте
Процедура ЗадатьПараметрыЗавершение(НаборПараметров, Параметры) Экспорт
	
	Если НЕ НаборПараметров = Неопределено Тогда
		мЗначенияПараметров = НаборПараметров;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	
	ВыполнитьКодСервер(мЗначенияПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ТолькоПросмотр = Объект.Предопределенный;
	
	Элементы.ГруппаКоманднаяПанель.Доступность = Не Объект.Предопределенный;
	
	флКонтекстЗагрузкаЭксель = ?(Объект.Контекст = Перечисления.__КонтекстыВыполненияПользовательскихФункций.ЗагрузкаЭксель, Истина, Ложь);
	
	// При загрузке из Эксель контекст зависит от того в каком правиле пытаемся выполнить загрузку,
	// в общем случае проверка невозможна.
	Элементы.ВыполнитьКод.Доступность = Не флКонтекстЗагрузкаЭксель;
	Элементы.ЗадатьПараметры.Доступность = Не флКонтекстЗагрузкаЭксель;
	
КонецПроцедуры

// Процедура добавляет параметры, необходимые для вычисления функции в данном контексте.
// 
&НаСервере
Процедура ДобавитьПараметры()
	
	Справочники.__ПользовательскиеФункции.ЗаполнитьПараметры(Объект);
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер();
	
КонецПроцедуры // ДобавитьПараметры()

// Процедура устанавливает заголовок функции в соответствии с внесенными изменениями.
// 
&НаСервере
Процедура ПолучитьНазваниеПодпрограммыСПараметрамиСервер()
	
	СтруктураЗаголовка = Справочники.__ПользовательскиеФункции.ПолучитьНазваниеПодпрограммыСПараметрами(Объект);
	НазваниеПодпрограммы = СтруктураЗаголовка.НазваниеСПараметрами;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТипыПараметров(СпрОбъект)
	
	Для Каждого ТекущийПараметр Из СпрОбъект.ПараметрыФункции Цикл
		
		ОписаниеТипаПараметра = ТекущийПараметр.ТипПараметра.Получить();
		
		Если ОписаниеТипаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Наименование", ТекущийПараметр.Наименование);
		
		МассивСтрок = Объект.ПараметрыФункции.НайтиСтроки(СтруктураОтбора);
		
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			МассивСтрок[0].фТипПараметра = ОписаниеТипаПараметра;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура преобразует реквизит управляемой формы ДанныеФормыКоллекция в массив структур.
// 
// Параметры:
//  СтрТаблиц  - Структура
//  ИмяТаблицы - Строка
// 
&НаСервере
Процедура УпаковатьТаблицу(ИмяТаблицы, СтрТаблиц)
	
	МассивРеквизитов = Объект[ИмяТаблицы].Выгрузить().Колонки;
	ИменаРеквизитов = Новый Структура;
	
	Для каждого Реквизит Из МассивРеквизитов Цикл
		ИменаРеквизитов.Вставить(Реквизит.Имя,Реквизит.ТипЗначения);
	КонецЦикла;
	
	СтрТаблиц.Вставить(ИмяТаблицы, __ОбщегоНазначенияКлиентСервер.УпаковатьДанныеФормыКоллекция(Объект[ИмяТаблицы], ИменаРеквизитов));
	СтрТаблиц.Вставить(ИмяТаблицы + "_Колонки", ИменаРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодСервер(ЗначенияПараметров)
	
	// ++ Обход ошибки отстутствия модуля БСП, не переносить
	ОбщегоНазначения = Неопределено;
	// -- Обход ошибки отстутствия модуля БСП, не переносить
	
	СтрПеременные = Новый Структура;
	
	Для Каждого СтрокаТаблицы Из Объект.Переменные Цикл
		Если Не ПустаяСтрока(СтрокаТаблицы.Имя) И Не СтрПеременные.Свойство(СтрокаТаблицы.Имя) Тогда
			СтрПеременные.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТабПараметров = Новый ТаблицаЗначений;
	ТабПараметров.Колонки.Добавить("Номер");
	ТабПараметров.Колонки.Добавить("Параметр");
	ТабПараметров.Колонки.Добавить("Значение");
	
	Ном = 1;
	Для Каждого КлючЗначение Из ЗначенияПараметров Цикл
		НоваяСтрока = ТабПараметров.Добавить();
		НоваяСтрока.Номер = Ном;
		НоваяСтрока.Параметр = КлючЗначение.Ключ;
		НоваяСтрока.Значение = КлючЗначение.Значение;
		Ном = Ном + 1;
	КонецЦикла;
	
	// Чтобы текст функции не изменился сформируем его копию.
	ТекстФункции = Строка(Объект.КодПодпрограммы);
	
	Попытка
		Результат = __ОбщегоНазначенияСервер.ВыполнитьПользовательскуюФункциюСПараметрами(ТекстФункции, 
						ТабПараметров, СтрПеременные);
		ОбщегоНазначения.СообщитьПользователю(Строка(Результат));
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выполнении функции по причине: %1'; 
										|en = 'Error when executing the function due to: %1'"),
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры // ВыполнитьКодСервер()

// Процедура выполняет действия при изменении контекста выполнения функции.
&НаСервере
Процедура КонтекстПриИзмененииСервер()
	
	УправлениеЭлементамиФормы();
	ДобавитьПараметры();
	
КонецПроцедуры

// Функция открывает помошник для выбора поля.
// 
&НаКлиенте
Процедура ОткрытьФормуВыбораПоля()
	
	ПараметрыФормы = Новый Структура;
	
	МассивИменПеременных = Новый Массив;
	
	Для Каждого ТекСтрока Из Объект.Переменные Цикл
		МассивИменПеременных.Добавить(ТекСтрока.Имя);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Переменные",МассивИменПеременных);
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуВыбораПоляЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ОбщаяФорма.__ФормаВыбораПоля", ПараметрыФормы, ЭтотОбъект,,,, Обработчик, Режим);
	
КонецПроцедуры // ОткрытьФормуВыбораПоля()

// Процедура обработчик оповещения "ОткрытьФормуВыбораПоляЗавершение".
// 
// Параметры:
// РезСтруктура - Структура.
// Параметры - Структура.
// 
&НаКлиенте
Процедура ОткрытьФормуВыбораПоляЗавершение(РезСтруктура, Параметры) Экспорт
	
	Если ТипЗнч(РезСтруктура) = Тип("Структура") Тогда
		Элементы.КодПодпрограммы.ВыделенныйТекст = РезСтруктура.Имя;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму мастера для ввода условного выражения.
// 
&НаКлиенте
Процедура ОткрытьКонструкторУсловногоВыражения()

	ПараметрыФормы = Новый Структура;
	СписокПеременных = Новый СписокЗначений;
	
	Для Каждого Элемент Из Объект.Переменные Цикл
		СписокПеременных.Добавить(Элемент.Имя);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Переменные", СписокПеременных);
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьКонструкторУсловногоВыраженияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.__ПользовательскиеФункции.Форма.УсловныйОператор", ПараметрыФормы, ЭтотОбъект,,,, Обработчик);
	
КонецПроцедуры // ОткрытьКонструкторУсловногоВыражения()

// Процедура обработчик оповещения "ОткрытьКонструкторУсловногоВыраженияЗавершение".
// 
// Параметры:
// РезВыражение - Строка.
// Параметры - Структура.
// 
&НаКлиенте
Процедура ОткрытьКонструкторУсловногоВыраженияЗавершение(РезВыражение, Параметры) Экспорт
	
	Если ТипЗнч(РезВыражение) = Тип("Строка") Тогда
		Элементы.КодПодпрограммы.ВыделенныйТекст = РезВыражение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
