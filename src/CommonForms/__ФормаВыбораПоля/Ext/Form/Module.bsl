
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ++ Обход ошибки отстутствия модуля БСП, не переносить
	ОбщегоНазначения = Неопределено;
	// -- Обход ошибки отстутствия модуля БСП, не переносить
	
	Параметры.Свойство("Режим", Режим);
	
	Если Параметры.Свойство("Переменные") Тогда
		Для каждого Имя Из Параметры.Переменные Цикл
			Переменные.Добавить(Имя);
		КонецЦикла;
	КонецЕсли; 
	
	ОписаниеСправочники = Справочники.ТипВсеСсылки();
	ОписаниеДокументы = Документы.ТипВсеСсылки();
	
	ОбновитьДерево();
	
	Если Поля.ПолучитьЭлементы().Количество() = 0 Тогда		
		ТекстСообщения = НСтр("ru='Нет полей для выбора.';en='No fields to select.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоля

// Процедура - обработчик события "Выбор" табличного поля "Поля".
// 
&НаКлиенте
Процедура ПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РезСтруктура = СформироватьРезСтруктуру(Элементы.Поля.ТекущаяСтрока);
	Если ТипЗнч(РезСтруктура) = Тип("Структура") Тогда
		Закрыть(РезСтруктура);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПоляПередРазворачиванием" поля табличного документа "Поля".
// 
&НаКлиенте
Процедура ПоляПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазвернутьПодчиненные(Строка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "КомандаОК".
// 
&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекущаяСтрока = Элементы.Поля.ТекущаяСтрока;
	РезСтруктура = СформироватьРезСтруктуру(ТекущаяСтрока);
	Закрыть(РезСтруктура);
	
КонецПроцедуры

// Процедура - действие команды "КомандаОбновить".
// 
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьДерево();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обновляет дерево полей.
// 
&НаСервере
Процедура ОбновитьДерево()
	
	ДанныеДерева = Поля.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	
	// Коллекция переменных
	Если Переменные.Количество() > 0 Тогда
		
		ЭлементВерх = ДанныеДерева.Добавить();
		ЗаполнитьЭлементДерева(ЭлементВерх, "Переменные",,,,, БиблиотекаКартинок.__Реквизиты);
		
		Коллекция = ЭлементВерх.ПолучитьЭлементы();
		
		Для каждого элСписка Из Переменные Цикл
			Элемент = Коллекция.Добавить();
			ЗаполнитьЭлементДерева(Элемент, элСписка.Значение,,, Истина, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДерево()

// Процедура заполняет строку дерева полей.
// 
// Параметры:
//  ЭлементДерева - Строка.
//  Имя - Строка
//  Синоним - Строка
//  Доступность - Булево
//  Картинка    - Картинка
// 
&НаСервере
Процедура ЗаполнитьЭлементДерева(ЭлементДерева
	                              , Имя
								  , Синоним = ""
								  , Описание = Неопределено
								  , Доступность = Ложь
								  , ДобавлятьПодчиненные = Ложь 
								  , Картинка = Неопределено)
	
	ЭлементДерева.Имя     = Имя;
	ЭлементДерева.Синоним = ?(ПустаяСтрока(Синоним), Имя, Синоним);
	ЭлементДерева.Тип = ?(Описание = Неопределено, Новый ОписаниеТипов("Строка"), Описание);
	
	ЭлементДерева.Доступно = Доступность;
	
	Если ДобавлятьПодчиненные Тогда
	
		МассивТипов = ЭлементДерева.Тип.Типы();
		
		Для каждого Тип Из МассивТипов Цикл
		
			Если ОписаниеСправочники.СодержитТип(Тип) ИЛИ ОписаниеДокументы.СодержитТип(Тип) Тогда
				
				Коллекция   = ЭлементДерева.ПолучитьЭлементы();
				ЭлементПодч = Коллекция.Добавить();
				ЗаполнитьЭлементДерева(ЭлементПодч,"СлужебнаяДляРазворота");
				Прервать;
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Картинка = Неопределено Тогда
		ЭлементДерева.Картинка = Картинка;
	Иначе
		ЭлементДерева.Картинка = БиблиотекаКартинок.__Реквизит;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЭлементДерева()

// Функция формирует строку имен с разделителями точка по подчиненным строкам дерева. 
// Рекурсия.
// 
// Параметры:
// 	СтрокаСтарт        	 - СтрокаДереваЗначений.
//
// Возвращаемое значение:
// 	РезСтрока        	 - Строка.
// 
&НаСервере
Функция СобратьИмена(СтрокаСтарт)

	РезСтрока  = "";
	Если СтрокаСтарт <> Неопределено Тогда
		
		РезСтрока = СтрокаСтарт.Имя;
		
		СтрокаРодитель = СтрокаСтарт.ПолучитьРодителя();
		
		Если СтрокаРодитель <> Неопределено Тогда
			РезСтрока = СобратьИмена(СтрокаРодитель) + "."  +РезСтрока;
		КонецЕсли;
	КонецЕсли;

	Возврат РезСтрока;
	
КонецФункции // СобратьИмена()

// Функция формирует результирующую структуру для возврата.
// 
// Параметры:
//   ИдСтроки - Число
// 
// Возвращаемое значение:
//  РезСтруктура - Структура.
// 
&НаСервере
Функция СформироватьРезСтруктуру(ИдСтроки)
	
	РезСтруктура = Неопределено;
	
	Если ТипЗнч(ИдСтроки) = Тип("Число") Тогда
		
		ТекущаяСтрока = Поля.НайтиПоИдентификатору(ИдСтроки);
		
		Если Не ТекущаяСтрока = Неопределено И ТекущаяСтрока.Доступно Тогда
			РезСтруктура = Новый Структура("Имя");
			РезСтруктура.Имя = СобратьИмена(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезСтруктура;
	
КонецФункции // СформироватьРезСтруктуру()

// Процедура добавляет в дерево подчиненные реквизиты.
// 
// Параметры:
//  ИД  - Число
// 
&НаСервере
Процедура РазвернутьПодчиненные(ИД)

	СтрокаДерева = Поля.НайтиПоИдентификатору(ИД);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОписаниеРеквизитов(СтрокаДерева,"Справочники", ОписаниеСправочники, "СправочникСсылка");
	ДобавитьОписаниеРеквизитов(СтрокаДерева,"Документы" ,ОписаниеДокументы ,"ДокументСсылка");

КонецПроцедуры // РазвернутьПодчиненные()

// Процедура добавляет в дерево строки с описанием реквизитов объекта.
// 
// Параметры:
// 	СтрокаДерева       	 -	ДанныеФормыЭлементДерева.
// 	ИмяКоллекции       	 -	Строка.
// 	ОписаниеКоллекции  	 -	ОписаниеТипов.
// 	НачалоИмениТипа    	 -	Строка.
// 
&НаСервере
Процедура ДобавитьОписаниеРеквизитов(СтрокаДерева,ИмяКоллекции,ОписаниеКоллекции,НачалоИмениТипа)
	
	Если Не ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Тип Из СтрокаДерева.Тип.Типы() Цикл
		
		Если ОписаниеКоллекции.СодержитТип(Тип) Тогда
			
			РезСтруктура = __ОбщегоНазначенияСервер.ПолучитьИмяОбъектаПоОписаниюТипов(СтрокаДерева.Тип,ИмяКоллекции,НачалоИмениТипа);
			Если РезСтруктура <> Неопределено Тогда
				
				Коллекция = СтрокаДерева.ПолучитьЭлементы();
				
				// Убедимся, что разворачивается служебная строка.
				Если Не Коллекция.Количество() = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				ПерваяСтрока = Коллекция[0];
				
				Если ПерваяСтрока.Имя = "СлужебнаяДляРазворота" Тогда
					Коллекция.Очистить();
				Иначе
					Продолжить;
				КонецЕсли;
				
				// Стандартные реквизиты
				Если ИмяКоллекции = "Справочники" Тогда
					
					ЭлементПодч = Коллекция.Добавить();
					ЗаполнитьЭлементДерева(ЭлементПодч, "Код");
					
					ЭлементПодч = Коллекция.Добавить();
					ЗаполнитьЭлементДерева(ЭлементПодч, "Наименование");
					
				ИначеЕсли ИмяКоллекции = "Документы" Тогда	
					
					ЭлементПодч = Коллекция.Добавить();
					ЗаполнитьЭлементДерева(ЭлементПодч, "Дата");
					
					ЭлементПодч = Коллекция.Добавить();
					ЗаполнитьЭлементДерева(ЭлементПодч, "Номер");
					
					ЭлементПодч = Коллекция.Добавить();
					ЗаполнитьЭлементДерева(ЭлементПодч, "Проведен");
					
				КонецЕсли;
				
				// Реквизиты объекта
				Для Каждого Мета Из Метаданные[ИмяКоллекции][РезСтруктура.Имя].Реквизиты Цикл
					ЭлементПодч = Коллекция.Добавить();
					ЗаполнитьЭлементДерева(ЭлементПодч, Мета.Имя, Мета.Синоним, Мета.Тип, Истина, Истина);
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли; // Есть тип
	КонецЦикла; // По массиву типов
	
КонецПроцедуры // ДобавитьОписаниеРеквизитов()

#КонецОбласти
