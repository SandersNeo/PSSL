////////////////////////////////////////////////////////////////////////////////
// Формы (вызов сервера): для серверных функций обработок форм

#Область ПрограммныйИнтерфейс

// Используется для модификации форм на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма объекта метаданных.
//   Отказ - Булево - Дата, для которой определяются ставки налога.
//   СтандартнаяОбработка - Булево - Значение параметра передаваемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка = Истина) Экспорт
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	ИмяМетода = СтрЗаменить(ПолучитьИмяМетода(
		Форма.ИмяФормы, "ПриСозданииНаСервере", "Форма, Отказ, СтандартнаяОбработка"), ".", "");
		
	Попытка
		Выполнить(ИмяМетода);
	Исключение
		ВызватьИсключение СтрШаблон("%1%2Имя метода: %3", ОписаниеОшибки(), Символы.ПС, ИмяМетода);
	КонецПопытки;
			
КонецПроцедуры 

#Область ПроцедурыИФункцииРаботыСЭлементамиФормы

// Процедура устанавливает подменю выбора операции.
// 
// Параметры:
//  Элементы 			  - ВсеЭлементыФормы.
//  Команды         	  - КомандыФормы.
//  ИмяКнопки 			  - Строка.
//  Синоним 			  - Строка.
//  ИмяДействия 		  - Строка.
//  ГруппаРодитель 		  - ГруппаФормы (По умолчанию = Неопределено).
//  ТолькоВоВсехДействиях - Булево (По умолчанию = Ложь).
//  Картинка 			  - Картинка (По умолчанию = Неопределено).
//  Пометка 			  - Булево (По умолчанию = Ложь). 
// 
Процедура ДобавитьКомандуНаФорму(Элементы, Команды, ИмяКнопки, Синоним, ИмяДействия, 
	ГруппаРодитель = Неопределено, ТолькоВоВсехДействиях = Ложь, Картинка = Неопределено, Пометка = Ложь) Экспорт

	ИмяКоманды = СтрШаблон("Команда%1", ИмяКнопки);
	
	// Добавляем новую команду обработки выбора вида операции.
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = "Подключаемый_" + ИмяДействия;
	Если Картинка <> Неопределено Тогда
		Команда.Картинка = Картинка;
	КонецЕсли;
	
	Если ГруппаРодитель = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"));
	Иначе	
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаРодитель);
	КонецЕсли;  	
	
	НоваяКнопка.Вид	= ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = ИмяКоманды;
	НоваяКнопка.Заголовок = Синоним;
	НоваяКнопка.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
	НоваяКнопка.Пометка = Пометка;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Процедура удаляет элементы группы.
// 
// Параметры:
//  Элементы    - ВсеЭлементыФормы - все элементы формы.
//  ГруппаФормы - ГруппаФормы - группа формы родитель.
// 
Процедура УдалитьЭлементыГруппыФормы(Элементы, ГруппаФормы) Экспорт
	
	КоличествоДекораций = ГруппаФормы.ПодчиненныеЭлементы.Количество();
	Для НомерЭлемента = 1 По КоличествоДекораций Цикл
		
		ЭлементГруппы = ГруппаФормы.ПодчиненныеЭлементы[КоличествоДекораций - НомерЭлемента];
		
		НайденныйЭлемент = Элементы.Найти(ЭлементГруппы.Имя);
		Если НайденныйЭлемент <> Неопределено Тогда			
			Элементы.Удалить(НайденныйЭлемент);	
		КонецЕсли;					
	КонецЦикла;	
	
КонецПроцедуры // УдалитьЭлементыГруппыФормы()

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУсловнымОформлением

// Процедура добавляет элемент условного оформления.
// 
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпановкиДанных - Условное оформление формы.
//  Представление  	   - Строка - Представление оформления.
//  СтруктураУО 	   - Структура ("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей").
//  Позиция			   - Число (Позиция, в которую необходимо добавить оформление. 
// 							Если = Неопределено, тогда добавляется в конец).
// 
Процедура ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление, 
	СтруктураУО, Позиция = Неопределено) Экспорт

	// Раскроем структуру УО.
	СтруктураОформления = СтруктураУО.СтруктураОформления;
	СтруктураУсловия = СтруктураУО.СтруктураУсловия;
	МассивОформляемыхПолей = СтруктураУО.МассивОформляемыхПолей;
	
	// Новый элемент условного оформления.
	Если Позиция = Неопределено Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
	Иначе	
		ЭлементУО = УсловноеОформление.Элементы.Вставить(Позиция);
	КонецЕсли;
	ЭлементУО.Представление = Представление;
	ЭлементУО.Использование = Истина;
	
	// Оформление. 	
	Для Каждого Оформление Из СтруктураОформления Цикл
		ЭлементУО.Оформление.УстановитьЗначениеПараметра(Оформление.Ключ, Оформление.Значение);
	КонецЦикла;	
	
	// Условие.
	Если ТипЗнч(СтруктураУсловия) = Тип("Массив") Тогда
		МассивУсловий = СтруктураУсловия;
	Иначе
		МассивУсловий = Новый Массив;
		МассивУсловий.Добавить(СтруктураУсловия);
	КонецЕсли;
	
	Для Каждого Условие Из МассивУсловий Цикл		
		
		УсловиеУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		УсловиеУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Условие.УсловиеЛевое);
		
		Если Условие.Свойство("ВидСравнения") Тогда
			// По умолчанию: ВидСравненияКомпоновкиДанных.Равно.
			УсловиеУО.ВидСравнения = Условие.ВидСравнения;
		КонецЕсли;
		
		Если Условие.Свойство("УсловиеПравое") Тогда
			УсловиеУО.ПравоеЗначение = Условие.УсловиеПравое;
		КонецЕсли;
	КонецЦикла;
	
	// Оформляемые поля.	
	Для Каждого Поле Из МассивОформляемыхПолей Цикл
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьЭлементУсловногоОформления()

// Процедура удаляет элементы условного оформления по представлению.
// 
// Параметры:
//  Представление 	   - Строка - Представление элемента.
//  УсловноеОформление - УсловноеОформлениеКомпановкиДанных - условное оформление формы.
// 
Процедура УдалитьЭлементыОформленияПоПредставлению(Представление, УсловноеОформление) Экспорт
	
	КоличествоЭлементов = УсловноеОформление.Элементы.Количество();
	Если КоличествоЭлементов = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
		
		СтарыйЭлемент = УсловноеОформление.Элементы.Получить(КоличествоЭлементов - НомерЭлемента);
		Если СтарыйЭлемент.Представление = Представление Тогда
			УсловноеОформление.Элементы.Удалить(СтарыйЭлемент);	
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементыОформленияПоПредставлению()

// Функция формирует простое условия условного оформления.
//  
// Параметры:
//	УсловиеЛевое  - Строка - Имя левого значения.
//	УсловиеПравое - Любое значение - Правое значение условия.
//	ВидСравненияУсловия (По умолчанию = Неопределено).
//
// Возвращаемое значение:
//   Структура - Структура ключей простого условного оформления.
//
Функция ПростоеУсловие(УсловиеЛевое, УсловиеПравое, ВидСравненияУсловия = Неопределено) Экспорт
	
	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("УсловиеЛевое" , УсловиеЛевое);
	СтруктураУсловия.Вставить("УсловиеПравое", УсловиеПравое);
	Если ВидСравненияУсловия <> Неопределено Тогда
		СтруктураУсловия.Вставить("ВидСравнения", ВидСравненияУсловия);
	КонецЕсли;
	
	Возврат СтруктураУсловия;
	
КонецФункции // ПростоеУсловие()

// Функция формирует простое условия условного оформления.
//  
// Параметры:
//	УсловиеЛевое  - Строка - Имя левого значения.
//	ВидСравненияУсловия - ВидСравненияКомпоновкиДанных - Вид сравнения условия.
//
// Возвращаемое значение:
//   Структура - Структура ключей условий на заполнение.
//
Функция УсловиеНаЗаполнение(УсловиеЛевое, ВидСравненияУсловия) Экспорт
	
	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("УсловиеЛевое", УсловиеЛевое);
	СтруктураУсловия.Вставить("ВидСравнения", ВидСравненияУсловия);
	
	Возврат СтруктураУсловия;
	
КонецФункции // УсловиеНаЗаполнение()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

#Область ОбщиеФормы

#КонецОбласти //ОбщиеФормы 

#Область Справочники

#КонецОбласти //Справочники 

#Область Документы

#КонецОбласти //Документы 

#Область Обработки

#КонецОбласти //Обработки 

#Область Отчеты

#КонецОбласти //Отчеты 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИмяМетода(ИмяФормы, Событие, ДополнительныеПараметры)
	
	ПромежуточноеИмя = СтрШаблон("%1%2(%3)", 
		СтрЗаменить(ИмяФормы, ".Форма.", ""), Событие, ДополнительныеПараметры);
	
	Возврат Прав(ПромежуточноеИмя, СтрДлина(ПромежуточноеИмя) - СтрНайти(ИмяФормы, "."));
	
КонецФункции

#КонецОбласти