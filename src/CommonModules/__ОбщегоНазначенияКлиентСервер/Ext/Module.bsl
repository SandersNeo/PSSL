
////////////////////////////////////////////////////////////////////////////////
// Общего назначения (клиент): для клиентских и серверных функций общего назначения

#Область ПрограммныйИнтерфейс

// Функция определяет старше версия обновления или нет. 
// Версия представляет собой строку чисел с разделителем "."
// Например "1.1.0.256". Сравнение выполняется по-разрядно начиная со старших разрядов. Если количество разрядов не 
// совпадает старшей считается версия с большим количеством разрядов.
// 
// Параметры:
//  ТекущаяВерсия    - Строка.
//  ВерсияОбновление - Строка.
// 
// Возвращаемое значение:
//   Булево.
// 
Функция ВерсияОбновленияСтарше(ТекущаяВерсия, ВерсияОбновления)  Экспорт
	
	флРезультат = Ложь;
	
	МассивТекущаяВерсия = __СтроковыеФункцииКлиентСервер.РазобратьСтрокуСРазделителями(ТекущаяВерсия, ".");
	МассивВерсияОбновления = __СтроковыеФункцииКлиентСервер.РазобратьСтрокуСРазделителями(ВерсияОбновления, "."); 
	
	КоличествоТекущаяВерсия = МассивТекущаяВерсия.Количество();
	КоличествоВерсияОбновления = МассивВерсияОбновления.Количество();
	
	Если КоличествоТекущаяВерсия = КоличествоВерсияОбновления Тогда
		
		__РаботаСКоллекциямиКлиентСервер.ПреобразоватьМассивСтрокВЧисла(МассивТекущаяВерсия);
		__РаботаСКоллекциямиКлиентСервер.ПреобразоватьМассивСтрокВЧисла(МассивВерсияОбновления);
		
		Для й = 1 По КоличествоТекущаяВерсия Цикл
			
			Если МассивВерсияОбновления[й-1] > МассивТекущаяВерсия[й-1] Тогда
				
				флРезультат = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		Если КоличествоВерсияОбновления > КоличествоТекущаяВерсия Тогда
			флРезультат = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат флРезультат;

КонецФункции // ВерсияОбновленияСтарше()

// Функция упаковывает ДанныеФормыКоллекция в массив структур. 
// Может использоваться для передачи таблицы между клиентом и сервером.
// 
// Параметры:
//  ДФК          - ДанныеФормыКоллекция.
//  ИменаКолонок - Массив.
// 
// Возвращаемое значение:
//   Массив.
// 
Функция УпаковатьДанныеФормыКоллекция(ДФК, ИменаКолонок) Экспорт
	
	РезМассив = Новый Массив;
	
	Для Каждого СтрокаТаблицы ИЗ ДФК Цикл
		
		МодельСтроки = Новый Структура;
		
		Для Каждого Элемент ИЗ ИменаКолонок Цикл
			
			Если ТипЗнч(ИменаКолонок) = Тип("Структура") Тогда
				ИмяКолонки = Элемент.Ключ;
			Иначе
				ИмяКолонки = Элемент;
			КонецЕсли;
			
			МодельСтроки.Вставить(ИмяКолонки, СтрокаТаблицы[ИмяКолонки]);
			
		КонецЦикла; // ИменаКолонок.
		
		РезМассив.Добавить(МодельСтроки);
		
	КонецЦикла; // ДФК.
	
	Возврат РезМассив;
	
КонецФункции // УпаковатьДанныеФормыКоллекция()

// Процедура разбирает строку с разделителями и упаковывает значения в массив.
// 
// Параметры:
//  ИсходнаяСтрока - Строка.
//  Разделитель    - Строка.
// 
Функция РазобратьСтрокуСРазделителями(ИсходнаяСтрока, Разделитель = ",") Экспорт
	
	РезМассив = Новый Массив;
	
	// Разделитель бывает динной строки > 1, учитывая особенность "СтрЗаменить",
	// заменим его на редкий односимвольный разделитель (смайлик) Символ(9786).
	Сепаратор = Символ(9786);
	Образец = СтрЗаменить(ИсходнаяСтрока, Разделитель, Сепаратор);
	РезМассив = СтрРазделить(Образец, Сепаратор, Ложь);
	
	Возврат РезМассив;
	
КонецФункции // РазобратьСтрокуСРазделителями()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
